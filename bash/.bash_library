_source_if_exists() {
    if [[ -s $1 ]]; then
        if [[ $TERM = "xterm-256color" ]]; then
            if [[ -n $2 ]]; then
                [[ $2 != "quiet" ]] && echo "Loading $2 …"
            else
                echo "Loading $(basename $1) …"
            fi
        fi
        source $1
    else
        return 1
    fi
}

# we key off the OS name to decide what to load
export OSNAME=$(uname -s)
case "$OSNAME" in
    Darwin|Linux|OpenBSD) ;;
    *) echo "Did not recognize OS '$OSNAME'; some things will not be set!" ;;
esac

unset VIRTUALIZER
if [[ "$OSNAME" = "Linux" ]]; then
    if [[ -d /proc/xen ]]; then
        export VIRTUALIZER="Xen"
    elif command -v lspci >/dev/null; then
        export VIRTUALIZER=$(lspci | egrep -io 'qemu|virtualbox|vmware|xen|parallels' | head -n1)
    fi
    if [[ -z "$VIRTUALIZER" ]] && command -v lscpu >/dev/null; then
        export VIRTUALIZER=$(lscpu | egrep -io 'kvm|xen')
    fi
fi

# load PATH and MANPATH
source ~/.bash_paths

# https://github.com/keybase/keybase-issues/issues/1712#issuecomment-141226705
export GPG_TTY=$(tty)

# make less more friendly for non-text input files, see lesspipe(1)
if command -v lesspipe >/dev/null; then
    eval "$(SHELL=/bin/sh lesspipe)"
elif command -v lesspipe.sh >/dev/null; then
    export LESSOPEN="|lesspipe.sh %s"
fi
# show ANSI colors
export LESS='-R'
# prevent creation of ~/.lesshst
export LESSHISTFILE="/dev/null"

# experience
export EDITOR="vim"
export VISUAL="$EDITOR"
[[ $OSNAME = Darwin ]] && export GIT_EDITOR="subl -w"
export MANWIDTH=80
if [[ "$OSNAME" = "Darwin" ]]; then  # color ls
    export CLICOLOR=yes
    export LSCOLORS="ExfxcxdxbxEgEdabagacad"
fi
if [[ "$OSNAME" = "Linux" ]]; then
    export MAILDIR="$HOME/Maildir"
    export MAIL=$MAILDIR
fi
export HOMEBREW_NO_ANALYTICS=1

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# compiling shit
#export CPATH="/opt/local/include"
#export LIBRARY_PATH="/opt/local/lib"
#export LD_RUN_PATH=$LIBRARY_PATH

# for building things needing openssl: e.g. `pip install cryptography`
#export ARCHFLAGS="-arch x86_64"
#export LDFLAGS="-L/usr/local/opt/openssl/lib"
#export CFLAGS="-I/usr/local/opt/openssl/include"

# http://www.zeromq.org/docs:tuning-zeromq
[[ "$OSNAME" = "Darwin" ]] && ulimit -n 1200

# startup virtualenv-burrito
_source_if_exists ~/.venvburrito/startup.sh "virtualenv-burrito"
[[ -n "$WORKON_HOME" ]] && export PROJECT_HOME="$HOME/src"

# setup pyenv/rbenv
for langenv in pyenv rbenv; do
    export $(echo $langenv | perl -ne 'print uc($_)')_ROOT="/usr/local/var/$langenv"
    if command -v $langenv >/dev/null; then
        echo "Loading $langenv …"
        eval "$($langenv init -)"
    fi
done
# initial pyenv virtualenv or virtualenvwrapper
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
if command -v pyenv >/dev/null; then
    if command -v pyenv-virtualenv-init >/dev/null; then
        eval "$(pyenv virtualenv-init -)"
    fi
fi

# setup rvm
_source_if_exists ~/.rvm/scripts/rvm

# Homebrew node modules
if [[ -d /usr/local/share/npm/bin ]]; then
    export PATH="/usr/local/share/npm/bin:${PATH}"
fi

# Go workspace
export GOPATH="$HOME/src/go"
export PATH="$GOPATH/bin:$PATH"

# GitHub
_source_if_exists $HOME/.homebrew_github_api_token quiet
if command -v hub >/dev/null; then
    eval "$(hub alias -s)"
fi
