#!/usr/bin/env bash
set -eo pipefail
DEBUG () { [[ -n $DEBUG ]]; }

if ! command -v stow >/dev/null; then
    echo 'ðŸ’¾  Missing the stow command. Installing!'
    case $(uname -s) in
        Linux)
            sudo apt-get -qq update
            sudo apt-get -qq -y install stow ;;
        Darwin) brew install stow >/dev/null ;;
        *) echo "ðŸ‘½  Unrecognized OS." ;;
    esac
fi

# Ensure some directories already exist so we don't just get symlinks
mkdir -p ~/.config; chmod 0700 ~/.config
mkdir -p ~/.gnupg; chmod 0700 ~/.gnupg
mkdir -p ~/.ssh; chmod 0700 ~/.ssh
mkdir -p ~/.terminfo
mkdir -p ~/.tfenv
mkdir -p ~/.vim
mkdir -p ~/bin; chmod 0700 ~/bin
if [[ $(uname -s) = Darwin ]]; then
    mkdir -p ~/"Library/Application Support/Code/User"
    mkdir -p ~/"Library/Application Support/Sublime Text 3/Packages"
    mkdir -p ~/"Library/Application Support/Sublime Text/Packages"
fi

# Start with all packages
PACKAGES=$(for f in *; do [[ -d $f ]] && echo "$f"; done | perl -pe 's/\n/ /g;')
DEBUG && echo "PACKAGES=$PACKAGES"

# Drop Darwin only packages
if [[ $(uname -s) != Darwin ]]; then
    PACKAGES=$(echo "$PACKAGES" | perl -pe 's/ ?macos//')
    PACKAGES=$(echo "$PACKAGES" | perl -pe 's/ ?homebrew//')
fi
DEBUG && echo "PACKAGES=$PACKAGES"

# Drop encrypted package if unsupported
if ! command -v git-crypt >/dev/null; then
    echo "- Skipping encrypted files"
    PACKAGES=$(echo "$PACKAGES" | perl -pe 's/ ?_encrypted//')
fi
DEBUG && echo "PACKAGES=$PACKAGES"

# Drop classic packages; they can be manually stowed
PACKAGES=$(echo "$PACKAGES" | perl -pe 's/ ?bash//')
DEBUG && echo "PACKAGES=$PACKAGES"

# shellcheck disable=SC2086
stow "$@" $PACKAGES
